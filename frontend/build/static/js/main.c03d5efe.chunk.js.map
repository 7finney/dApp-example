{"version":3,"sources":["logo.svg","components/TransferForm.js","components/QRComponent.js","components/SwapForm.js","components/ApproveForm.js","components/BalanceForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TransferForm","authToken","useState","toAddr","setToAddr","disabled","setDisabled","tokenAmount","setTokenAmount","useLocalStorage","pubKey","setpubKey","setQRUrl","useEffect","checkDisabled","className","onSubmit","evt","preventDefault","txParams","from","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","data","type","value","name","onChange","e","target","step","QRComponent","bgColor","setBgColor","qrURL","Math","floor","random","toString","containerStyle","style","size","fgColor","level","includeMargin","renderAs","SwapForm","pubkey","Authorization","ApproveForm","BalanceForm","balance","setBalance","MainView","setAuthToken","token","catch","error","console","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c03d5efe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a22ecc3f.svg\";","import React, { useState, useEffect } from \"react\";\nimport { useLocalStorage } from '@rehooks/local-storage';\n\nexport default function TransferForm({ authToken }) {\n  const [toAddr, setToAddr] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [tokenAmount, setTokenAmount] = useState(0);\n  const [pubKey, setpubKey] = useLocalStorage(\"pubkey\");\n  const [qrURL, setQRUrl] = useLocalStorage(\"qrURL\");\n  \n  useEffect(() => {\n    checkDisabled();\n  });\n  const checkDisabled = () => {\n    if (authToken && pubKey && toAddr && tokenAmount > 0) {\n      setDisabled(false);\n      return;\n    }\n    setDisabled(true);\n  };\n  const handleTransfer = (evt) => {\n    evt.preventDefault();\n    const txParams = { from: pubKey, toAddr, tokenAmount };\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${authToken}` },\n      // TODO: better we use base64 encoding to transfer values\n      body: JSON.stringify(txParams)\n    };\n    // create unsigned transaction from dApp-backend\n    fetch('/api/v0/transferToken', requestOptions)\n      .then(response => response.json())\n      .then(data => setQRUrl(data))\n  }\n  return (\n    <form className=\"transfer-form\" onSubmit={handleTransfer}>\n      <label>\n        Your Public address that you will use to sign the transaction:\n        <input type=\"text\" value={pubKey} name=\"pubkey\" onChange={(e) => setpubKey(e.target.value)} />\n      </label>\n      <label>\n        To address:\n        <input type=\"text\" value={toAddr} name=\"toAddress\" onChange={(e) => setToAddr(e.target.value)} />\n      </label>\n      <label>\n        Token amount:\n        <input\n          type=\"number\"\n          step=\"1\"\n          value={tokenAmount}\n          name=\"token\"\n          onChange={(e) => setTokenAmount(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Transfer token\" disabled={disabled} />\n    </form>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useLocalStorage } from '@rehooks/local-storage';\nimport QRCode from \"qrcode.react\";\n\nexport default function QRComponent() {\n  const [bgColor, setBgColor] = useState('#FFFFFF');\n  const [qrURL] = useLocalStorage(\"qrURL\");\n  useEffect(() => {\n    setBgColor('#' + Math.floor(Math.random()*16777215).toString(16));\n  }, [qrURL]);\n  const containerStyle = {\n    'border': 'solid 5px',\n    'border-color': bgColor,\n    'padding': '2px'\n  }\n  return (\n    <div>\n      <h2>Scan following QR code to load transaction in your ethential wallet</h2>\n      <div style={containerStyle}>\n        <QRCode\n          value={qrURL}\n          size={200}\n          bgColor={\"#ffffff\"}\n          fgColor={\"#000000\"}\n          level={\"L\"}\n          includeMargin={false}\n          renderAs={\"canvas\"}\n        />\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useLocalStorage } from '@rehooks/local-storage';\nexport default function SwapForm({ authToken }) {\n  const [disabled, setDisabled] = useState(true);\n  const [tokenAmount, setTokenAmount] = useState(0);\n  const [pubKey, setpubKey] = useLocalStorage(\"pubkey\");\n  const [qrURL, setQRUrl] = useLocalStorage(\"qrURL\");\n  useEffect(() => {\n    checkDisabled();\n  });\n  const checkDisabled = () => {\n    if (authToken && pubKey) {\n      setDisabled(false);\n      return;\n    }\n    setDisabled(true);\n  };\n  const handleSwap = (evt) => {\n    evt.preventDefault();\n    const txParams = { pubkey: pubKey, tokenAmount: tokenAmount };\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${authToken}` },\n      body: JSON.stringify(txParams),\n    };\n    fetch(\"/api/v0/swap\", requestOptions)\n      .then((response) => response.json())\n      .then(data => setQRUrl(data))\n  };\n  return (\n    <div>\n      <form className=\"transfer-form\" onSubmit={handleSwap}>\n        <label>\n          Public address:\n          <input type=\"text\" value={pubKey} name=\"pubkey\" onChange={(e) => setpubKey(e.target.value)} />\n        </label>\n        <label>\n          Token amount:\n          <input type=\"text\" value={tokenAmount} name=\"tokenAmount\" onChange={(e) => setTokenAmount(e.target.value)} />\n        </label>\n        <input type=\"submit\" value=\"Swap token\" disabled={disabled} />\n      </form>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useLocalStorage } from '@rehooks/local-storage';\nexport default function ApproveForm({ authToken }) {\n  const [qrURL, setQRUrl] = useLocalStorage(\"qrURL\");\n  const [disabled, setDisabled] = useState(true);\n  const [tokenAmount, setTokenAmount] = useState(0);\n  const [pubKey, setpubKey] = useLocalStorage(\"pubkey\");\n  \n  useEffect(() => {\n    checkDisabled();\n  });\n  const checkDisabled = () => {\n    if (authToken && pubKey) {\n      setDisabled(false);\n      return;\n    }\n    setDisabled(true);\n  };\n  const handleApprove = (evt) => {\n    evt.preventDefault();\n    const txParams = { pubkey: pubKey, tokenAmount: tokenAmount };\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${authToken}` },\n      body: JSON.stringify(txParams),\n    };\n    fetch(\"/api/v0/approve\", requestOptions)\n      .then((response) => response.json())\n      .then(data => setQRUrl(data))\n  };\n  return (\n    <div>\n      <form className=\"transfer-form\" onSubmit={handleApprove}>\n        <label>\n          Public address:\n          <input type=\"text\" value={pubKey} name=\"pubkey\" onChange={(e) => setpubKey(e.target.value)} />\n        </label>\n        <label>\n          Token amount:\n          <input type=\"text\" value={tokenAmount} name=\"tokenAmount\" onChange={(e) => setTokenAmount(e.target.value)} />\n        </label>\n        <input type=\"submit\" value=\"Approve manager to spend your tokens\" disabled={disabled} />\n      </form>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useLocalStorage } from '@rehooks/local-storage';\nexport default function BalanceForm({ authToken }) {\n  const [disabled, setDisabled] = useState(true);\n  const [balance, setBalance] = useState(0);\n  const [pubKey, setpubKey] = useLocalStorage(\"pubkey\");\n  \n  useEffect(() => {\n    checkDisabled();\n  });\n  const checkDisabled = () => {\n    if (authToken && pubKey) {\n      setDisabled(false);\n      return;\n    }\n    setDisabled(true);\n  };\n  const handleTransfer = (evt) => {\n    evt.preventDefault();\n    const txParams = { pubkey: pubKey };\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${authToken}` },\n      body: JSON.stringify(txParams),\n    };\n    fetch(\"/api/v0/getTokenBalance\", requestOptions)\n      .then((response) => response.json())\n      .then((data) => {\n        setBalance(data);\n      });\n  };\n  return (\n    <div>\n      <form className=\"transfer-form\" onSubmit={handleTransfer}>\n        <label>\n          Public address:\n          <input type=\"text\" value={pubKey} name=\"pubkey\" onChange={(e) => setpubKey(e.target.value)} />\n        </label>\n        <input type=\"submit\" value=\"Check balance\" disabled={disabled} />\n      </form>\n      <p>{balance}</p>\n    </div>\n  );\n}\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { useLocalStorage } from '@rehooks/local-storage';\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TransferForm from \"./components/TransferForm\";\nimport QRComponent from \"./components/QRComponent\";\nimport SwapForm from './components/SwapForm';\nimport ApproveForm from './components/ApproveForm';\nimport BalanceForm from \"./components/BalanceForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Fragment>\n        <MainView />\n      </Fragment>\n    </div>\n  );\n}\n\nfunction MainView() {\n  const [qrURL, setQRUrl] = useLocalStorage(\"qrURL\");\n  const [authToken, setAuthToken] = useState(\"\");\n  const [pubKey] = useLocalStorage(\"pubkey\");\n\n  useEffect(() => {\n    setQRUrl('');\n    // get authToken from dApp backend\n    fetch(\"/api/v0/genToken/123\")\n      .then((response) => response.json())\n      .then((data) => {\n        setAuthToken(data.token);\n        return;\n      })\n      .catch((error) => console.error(error));\n  }, []);\n\n  useEffect(() => {\n\n  }, [pubKey]);\n\n  return (\n    <div className=\"container\">\n      <Fragment>\n        <TransferForm authToken={authToken}/>\n        <ApproveForm authToken={authToken}/>\n        <SwapForm authToken={authToken}/>\n        <BalanceForm authToken={authToken}/>\n        {qrURL && <QRComponent/>}\n      </Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}